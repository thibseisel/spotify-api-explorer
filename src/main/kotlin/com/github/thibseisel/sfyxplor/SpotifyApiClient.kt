package com.github.thibseisel.sfyxplor

import com.github.thibseisel.api.spotify.*
import com.google.gson.annotations.*
import io.ktor.client.*
import io.ktor.client.engine.*
import io.ktor.client.features.*
import io.ktor.client.features.json.*
import io.ktor.client.request.*
import io.ktor.http.*
import kotlinx.coroutines.io.*
import org.jetbrains.annotations.*
import java.util.*

enum class SearchType {
    ARTIST, ALBUM, TRACK
}

private suspend fun ByteReadChannel.readText(): String = buildString {
    while (!isClosedForRead) {
        readUTF8LineTo(this)
    }
}

/**
 * A character sequence generated by an authorization server that grants access to resources from the Spotify Web API.
 * An access token can be used a certain amount of time, then expires.
 * An expired token cannot be used and should be renewed by the authorization server.
 */
data class OAuthToken(

    /**
     * The access token string as issued by the authorization server.
     */
    @SerializedName("access_token")
    val token: String,

    /**
     * The number of seconds the access token is granted for.
     * An expired token cannot be used and should be renewed.
     */
    @SerializedName("expires_in")
    val expiresIn: Int
)

/**
 * Thrown when authentication via the Spotify Authorization server failed
 * because the provided credentials were invalid.
 */
class AuthenticationException : Exception()

/**
 * Base class for errors that could occur when accessing resources from the Spotify Web API.
 */
sealed class SpotifyApiException : Exception()

/**
 * Thrown when access to an API resource failed because (re-)authentication is required.
 * This could be issued when:
 * - the client has not been authenticated, or
 * - the client's access token has expired.
 */
class AuthenticationRequired : SpotifyApiException()

/**
 * Thrown when a resource of the Spotify Web API cannot be accessed because it does not exists.
 * This may indicate that the id of the requested resource is invalid or no longer available.
 */
class ResourceNotFound : SpotifyApiException()

/**
 * Thrown when the request rate limit imposed by the Spotify Web API has been exceeded.
 * It is safe to re-attempt to access the same resource after the specified [delay][retryAfter] has elapsed.
 *
 * @property retryAfter The number of seconds to wait before re-attempting to access resources from the API.
 */
class ReachedRateLimit(val retryAfter: Int) : SpotifyApiException()

/**
 * Thrown when the Spotify Web API responded with an unexpected error.
 *
 * @property status The HTTP status code associated with the response.
 * @property message The message provided with the response describing the error.
 */
class UnexpectedCallFailure(val status: HttpStatusCode, override val message: String?) : SpotifyApiException()

/**
 * Provides an abstraction over the protocol used to access resources of the Spotify Web API.
 */
interface SpotifyApiClient {

    /**
     * Create an access token for the given [clientId] and keep it until it is expired.
     * Calls to other APIs of this class will use the generated token.
     *
     * @param clientId The public identifier of the client application.
     * This identifier is generated by Spotify on the developer dashboard.
     * @param clientSecret The secret key for the specified client.
     *
     * @return The token that has been generated.
     * @throws AuthenticationException If the provided [clientId] and/or [clientSecret] are invalid credentials.
     */
    suspend fun authenticate(clientId: String, clientSecret: String): OAuthToken

    suspend fun search(query: String, types: Set<SearchType>, offset: Int = 0, limit: Int = 20): Paging<SearchableResource>

    /**
     * Get Spotify catalog information for a single artist identified by its unique Spotify ID.
     *
     * @param id The Spotify ID for the artist.
     * @return The detailed information of this artist.
     *
     * @throws ResourceNotFound If the requested [id] does not match an existing artist.
     */
    suspend fun getArtist(id: String): Artist

    /**
     * Get Spotify catalog information for several artists based on their Spotify IDs.
     * If an artist is not found, a `null` is returned at the appropriate position.
     * Duplicates in [ids] results in duplicates in the returned artists.
     *
     * @param ids The Spotify IDs for the artists. Maximum `50` IDs.
     * @return The information for each artist, in the order requested.
     */
    suspend fun getSeveralArtists(ids: List<String>): List<Artist?>

    /**
     * Get Spotify catalog information about an artist’s albums.
     *
     * @param artistId The Spotify ID for the artist.
     * @param offset The index of the first album to return. Default: `0` (i.e., the first album).
     * Use with [limit] to get the next set of albums.
     * @param limit The number of albums to return. Default: `20`. Minimum: `1`. Maximum: `50`.
     *
     * @return A paginated list of albums where the requested artist participates.
     * @throws ResourceNotFound If the requested artist does not exist.
     */
    suspend fun getArtistAlbums(artistId: String, offset: Int = 0, limit: Int = 20): Paging<Album>

    /**
     * Get Spotify catalog information for a single album.
     *
     * @param id The Spotify ID for the album.
     *
     * @return The detailed information of this album.
     * @throws ResourceNotFound If the requested album does not exist.
     */
    suspend fun getAlbum(id: String): Album

    /**
     * Get Spotify catalog information for multiple albums identified by their Spotify IDs.
     * If an album is not found, a `null` is returned at the appropriate position.
     * Duplicates in [ids] results in duplicates in the returned albums.
     *
     * @param ids The Spotify IDs for the albums. Maximum: `20` IDs.
     * @return The information for each album, in the order requested.
     */
    suspend fun getSeveralAlbums(ids: List<String>): List<Album?>

    /**
     * Get Spotify catalog information about an album’s tracks.
     *
     * @param albumId The SpotifyID for the album.
     * @param offset The index of the first track to return. Default: `0`.
     * Use with limit to get the next set of tracks.
     * @param limit The maximum number of tracks to return. Default: `20`. Minimum: `1`. Maximum: `50`.
     *
     * @return A paginated list of tracks from the requested album.
     * @throws ResourceNotFound If the requested album does not exist.
     */
    suspend fun getAlbumTracks(albumId: String, offset: Int = 0, limit: Int = 20): Paging<Track>

    /**
     * Get Spotify catalog information for a single track identified by its unique Spotify ID.
     * @param id The Spotify ID for the track.
     *
     * @return The detailed information of this track.
     * @throws ResourceNotFound If the requested track does not exist.
     */
    suspend fun getTrack(id: String): Track

    /**
     * Get Spotify catalog information for multiple tracks identified by their Spotify IDs.
     * If a track is not found, a `null` is returned at the appropriate position.
     * Duplicates in [ids] results in duplicates in the returned tracks.
     *
     * @param ids The Spotify IDs for the tracks. Maximum: `50` IDs.
     * @return The information for each track, in the order requested.
     */
    suspend fun getSeveralTracks(ids: List<String>): List<Track?>

    /**
     * Get audio feature information for a single track identified by its unique Spotify ID.
     * @param trackId The Spotify ID for the track.
     *
     * @return The audio features for the requested track.
     * @throws ResourceNotFound If the requested track does not exist.
     */
    suspend fun getTrackFeatures(trackId: String): AudioFeatures

    /**
     * Get audio features for multiple tracks based on their Spotify IDs.
     * If a track is not found, a `null` is returned at the appropriate position.
     * Duplicates in [trackIds] results in duplicates in the returned tracks' features.
     *
     * @param trackIds The Spotify IDs for the tracks. Maximum: `100` IDs.
     * @return The audio features for each track, in the order requested.
     */
    suspend fun getSeveralTrackFeatures(trackIds: List<String>): List<AudioFeatures?>

    companion object {
        internal const val QUERY_IDS = "ids"
        internal const val QUERY_TYPE = "type"
        internal const val QUERY_INCLUDE_GROUPS = "include_groups"

        operator fun invoke(engine: HttpClientEngine): SpotifyApiClient = SpotifyApiClientImpl(engine)
    }
}

internal class SpotifyApiClientImpl
@TestOnly constructor(
    engine: HttpClientEngine,
    private var authToken: OAuthToken?
) : SpotifyApiClient {

    constructor(engine: HttpClientEngine) : this(engine, null)

    private val authService = HttpClient(engine) {
        expectSuccess = true
        Json {
            serializer = GsonSerializer {
                disableHtmlEscaping()
                disableInnerClassSerialization()
            }
        }

        defaultRequest {
            accept(ContentType.Application.Json)
            url {
                protocol = URLProtocol.HTTPS
                host = "accounts.spotify.com"
                encodedPath = "api/token"
                parameter("grant_type", "client_credentials")
            }
        }

        HttpResponseValidator {
            validateResponse {
                if (it.status == HttpStatusCode.Unauthorized) {
                    throw AuthenticationException()
                }
            }
        }
    }

    private val spotifyService = HttpClient(engine) {
        Json {
            serializer = GsonSerializer {
                disableHtmlEscaping()
                disableInnerClassSerialization()

                registerTypeAdapterFactory(SearchableAdapterFactory())
                registerTypeAdapter(MusicalMode::class.java, MusicalModeJsonAdapter())
                registerTypeAdapter(Pitch::class.java, SpotifyPitchJsonAdapter())
            }
        }

        defaultRequest {
            accept(ContentType.Application.Json)
            url {
                protocol = URLProtocol.HTTPS
                host = "api.spotify.com"
            }

            authToken?.let { (token, _) ->
                header(HttpHeaders.Authorization, "Bearer $token")
            }
        }

        HttpResponseValidator {
            throwOnHttpError()
        }
    }

    private fun HttpCallValidator.Config.throwOnHttpError() = validateResponse { response ->
        when (val status = response.status) {
            HttpStatusCode.Unauthorized -> throw AuthenticationRequired()
            HttpStatusCode.NotFound -> throw ResourceNotFound()
            HttpStatusCode.TooManyRequests -> {
                val retryDelaySeconds = response.headers[HttpHeaders.RetryAfter]?.toIntOrNull()?.plus(1) ?: 0
                throw ReachedRateLimit(retryDelaySeconds)
            }

            else -> if (status.value > 400) {
                val responseContent = response.content.readText()
                throw UnexpectedCallFailure(response.status, responseContent)
            }
        }
    }

    override suspend fun authenticate(clientId: String, clientSecret: String): OAuthToken {
        val base64Key = Base64.getEncoder().encodeToString("$clientId:$clientSecret".toByteArray())

        return authService.post<OAuthToken> {
            header(HttpHeaders.Authorization, "Basic $base64Key")
        }.also { authToken = it }
    }

    override suspend fun search(
        query: String,
        types: Set<SearchType>,
        offset: Int,
        limit: Int
    ): Paging<SearchableResource> = spotifyService.get {
        url {
            encodedPath = "v1/search"
            parameter("q", query)
            parameter("type", types.joinToString(",") { it.name.toLowerCase() })
        }
    }

    override suspend fun getArtist(id: String): Artist = spotifyService.get {
        url { encodedPath = "v1/artists/$id" }
    }

    override suspend fun getSeveralArtists(ids: List<String>): List<Artist?> = spotifyService.get {
        url {
            encodedPath = "v1/artists"
            parameters.appendAll("ids", ids)
        }
    }

    override suspend fun getArtistAlbums(artistId: String, offset: Int, limit: Int): Paging<Album> = spotifyService.get {
        url {
            encodedPath = "v1/artists/$artistId/albums"
            parameters.appendAll(SpotifyApiClient.QUERY_INCLUDE_GROUPS, listOf("album", "single"))
        }
    }

    override suspend fun getAlbum(id: String): Album = spotifyService.get {
        url { encodedPath = "v1/albums/$id" }
    }

    override suspend fun getSeveralAlbums(ids: List<String>): List<Album?> = spotifyService.get {
        url {
            encodedPath = "v1/albums"
            parameters.appendAll("ids", ids)
        }
    }

    override suspend fun getAlbumTracks(albumId: String, offset: Int, limit: Int): Paging<Track> = spotifyService.get {
        url { encodedPath = "v1/albums/$albumId/tracks" }
    }

    override suspend fun getTrack(id: String): Track = spotifyService.get {
        url { encodedPath = "v1/tracks/$id" }
    }

    override suspend fun getSeveralTracks(ids: List<String>): List<Track?> = spotifyService.get {
        url {
            encodedPath = "v1/tracks"
            parameters.appendAll("ids", ids)
        }
    }

    override suspend fun getTrackFeatures(trackId: String): AudioFeatures = spotifyService.get {
        url { encodedPath = "v1/audio-features/$trackId" }
    }

    override suspend fun getSeveralTrackFeatures(trackIds: List<String>): List<AudioFeatures?> = spotifyService.get {
        url {
            encodedPath = "v1/audio-features"
            parameters.appendAll("ids", trackIds)
        }
    }
}